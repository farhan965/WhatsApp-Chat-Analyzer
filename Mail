import pandas as pd

# Sample DataFrame
data = {'email': ['test@example.com', 'invalid-email', 'user@domain']}
df = pd.DataFrame(data)

# Define a regex pattern for a valid email format
email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'

# Check for invalid email formats
df['email_valid'] = df['email'].str.match(email_pattern)

# Filter out rows with invalid emails
invalid_emails = df[~df['email_valid']]

print("Invalid emails:")
print(invalid_emails)





import pandas as pd
import numpy as np

# Sample DataFrame with potential edge cases
data = {'email': ['test@example.com', 'invalid-email', 'Cap.com', 'user@domain', 'sample@domain.com']}
df = pd.DataFrame(data)

# Updated regex pattern to match emails with a valid structure
email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'

# Convert all entries to strings, fill NaN with empty strings
df['email'] = df['email'].astype(str).fillna('')

# Use str.fullmatch() for a complete match and ensure no NaN values
df['email_valid'] = df['email'].str.fullmatch(email_pattern).fillna(False)

# Check if there are any invalid emails
if (~df['email_valid']).any():
    # Filter out rows with invalid emails if there are any
    invalid_emails = df[~df['email_valid']]
    print("Invalid emails:")
    print(invalid_emails)
else:
    print("No invalid emails found.")




import pandas as pd

# Sample DataFrame
data = {'Id': ['1234567890123456', '123456789012345', '12345678901234567', '0123456789012345']}
df = pd.DataFrame(data)

# Ensure the Id column is treated as string
df['Id'] = df['Id'].astype(str)

# Filter rows where Id length is not equal to 16
invalid_length_ids = df[(df['Id'].str.len() > 16) | (df['Id'].str.len() < 16)]

print("Rows with Id length not equal to 16:")
print(invalid_length_ids)



import pandas as pd

# Sample DataFrame
data = {'Name': ['John Doe', 'Alice', '123ABC', 'Tom@', 'Mary Jane', '4567']}
df = pd.DataFrame(data)

# Define a regex pattern for valid names (letters and spaces only)
name_pattern = r'^[A-Za-z\s]+$'

# Check for invalid names
df['name_valid'] = df['Name'].str.fullmatch(name_pattern).fillna(False)

# Filter rows with invalid names
invalid_names = df[~df['name_valid']]

print("Rows with invalid names:")
print(invalid_names)
